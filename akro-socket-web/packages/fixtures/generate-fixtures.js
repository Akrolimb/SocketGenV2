/**
 * Script to generate synthetic test meshes for development and testing
 * Run with: node generate-fixtures.js
 */

const fs = require('fs')
const path = require('path')

/**
 * Generate a simple cylindrical mesh in OBJ format
 * Represents a basic limb shape for testing
 */
function generateSyntheticCylinder() {
  const radius = 40 // 40mm radius (80mm diameter)
  const height = 400 // 400mm tall
  const segments = 32 // Number of circular segments
  const heightSegments = 20 // Number of height divisions
  
  let vertices = []
  let faces = []
  let uvs = []
  
  // Generate vertices
  for (let h = 0; h <= heightSegments; h++) {
    const y = (h / heightSegments) * height
    const radiusScale = 1.0 - (h / heightSegments) * 0.3 // Taper slightly
    
    for (let s = 0; s <= segments; s++) {
      const angle = (s / segments) * Math.PI * 2
      const x = Math.cos(angle) * radius * radiusScale
      const z = Math.sin(angle) * radius * radiusScale
      
      vertices.push([x, y, z])
      
      // UV coordinates
      const u = s / segments
      const v = h / heightSegments
      uvs.push([u, v])
    }
  }
  
  // Generate faces
  for (let h = 0; h < heightSegments; h++) {
    for (let s = 0; s < segments; s++) {
      const i1 = h * (segments + 1) + s + 1     // 1-indexed for OBJ
      const i2 = h * (segments + 1) + (s + 1) + 1
      const i3 = (h + 1) * (segments + 1) + (s + 1) + 1
      const i4 = (h + 1) * (segments + 1) + s + 1
      
      // Two triangles per quad
      faces.push([i1, i2, i3])
      faces.push([i1, i3, i4])
    }
  }
  
  // Generate OBJ content
  let objContent = '# Synthetic limb cylinder for testing\n'
  objContent += '# Generated by Akro Socket Generator\n\n'
  
  // Vertices
  objContent += '# Vertices\n'
  vertices.forEach(v => {
    objContent += `v ${v[0].toFixed(6)} ${v[1].toFixed(6)} ${v[2].toFixed(6)}\n`
  })
  
  // UV coordinates
  objContent += '\n# UV coordinates\n'
  uvs.forEach(uv => {
    objContent += `vt ${uv[0].toFixed(6)} ${uv[1].toFixed(6)}\n`
  })
  
  // Faces
  objContent += '\n# Faces\n'
  faces.forEach(f => {
    objContent += `f ${f[0]}/${f[0]} ${f[1]}/${f[1]} ${f[2]}/${f[2]}\n`
  })
  
  return objContent
}

/**
 * Generate a simple MTL material file
 */
function generateSimpleMTL() {
  return `# Material for synthetic cylinder
newmtl synthetic_limb
Ka 0.2 0.2 0.2
Kd 0.8 0.8 0.8
Ks 0.1 0.1 0.1
Ns 10.0
illum 2
map_Kd markings.png
`
}

/**
 * Generate a simple test texture with colored markings
 * Returns canvas data URL (base64)
 */
function generateTestTexture() {
  // This would need to be run in a browser environment with Canvas
  // For now, return instructions for manual creation
  return `
# Instructions to create markings.png:

1. Create a 1024x1024 PNG image
2. Use a white/light gray background
3. Add test markings:
   - Red horizontal lines at 25%, 50%, 75% height (trimlines)
   - Green vertical bands at 30° and 150° angles (relief areas)
   - Blue patches at 0° and 180° (load areas)  
   - Yellow dots at anatomical landmarks

This texture will be used for testing the HSV color detection algorithm.
`
}

// Main execution
console.log('Generating synthetic test fixtures...')

const meshesDir = path.join(__dirname, 'meshes')
const texturesDir = path.join(__dirname, 'textures')

// Ensure directories exist
if (!fs.existsSync(meshesDir)) {
  fs.mkdirSync(meshesDir, { recursive: true })
}
if (!fs.existsSync(texturesDir)) {
  fs.mkdirSync(texturesDir, { recursive: true })
}

try {
  // Generate cylinder OBJ
  const cylinderOBJ = generateSyntheticCylinder()
  fs.writeFileSync(path.join(meshesDir, 'synthetic-cylinder.obj'), cylinderOBJ)
  console.log('✓ Generated synthetic-cylinder.obj')
  
  // Generate MTL
  const mtl = generateSimpleMTL()
  fs.writeFileSync(path.join(meshesDir, 'synthetic-cylinder.mtl'), mtl)
  console.log('✓ Generated synthetic-cylinder.mtl')
  
  // Generate texture instructions
  const textureInstructions = generateTestTexture()
  fs.writeFileSync(path.join(texturesDir, 'texture-instructions.txt'), textureInstructions)
  console.log('✓ Generated texture instructions')
  
  console.log('\nTest fixtures generated successfully!')
  console.log('Note: You\'ll need to manually create the markings.png texture file.')
  console.log('See texture-instructions.txt for details.')
  
} catch (error) {
  console.error('Error generating fixtures:', error)
}